// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TodoApi.Api.Data;

#nullable disable

namespace TodoApi.Api.Migrations
{
    [DbContext(typeof(TodoDbContext))]
    [Migration("20250714170528_FixSeedDataWithStaticDates")]
    partial class FixSeedDataWithStaticDates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TodoApi.Api.Models.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Medium");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsCompleted");

                    b.HasIndex("Priority");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Development",
                            CreatedAt = new DateTime(2024, 1, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Set up the initial .NET API project with Entity Framework and PostgreSQL",
                            IsCompleted = false,
                            Priority = "High",
                            Title = "Complete project setup"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Development",
                            CreatedAt = new DateTime(2024, 1, 15, 10, 5, 0, 0, DateTimeKind.Utc),
                            Description = "Create endpoints for Create, Read, Update, and Delete operations for todos",
                            IsCompleted = false,
                            Priority = "High",
                            Title = "Implement CRUD operations"
                        },
                        new
                        {
                            Id = 3,
                            Category = "DevOps",
                            CreatedAt = new DateTime(2024, 1, 15, 10, 10, 0, 0, DateTimeKind.Utc),
                            Description = "Configure GitHub Actions for continuous integration and deployment",
                            IsCompleted = false,
                            Priority = "Medium",
                            Title = "Set up CI/CD pipeline"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
